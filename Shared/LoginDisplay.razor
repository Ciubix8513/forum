@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject IApiLogic _apiLogic
@inject ILocalStorageService _localStorageService;
@code 
{
    private async Task Logout()
    {
        var response = await _apiLogic.LogoutAsync();
        if(response == "Success")
        {
            (_authStateProvider as CustomAuthProvider).ClearAuthInfo();
            await _localStorageService.RemoveItemAsync("isauthenticated");
            _navigationManager.NavigateTo("/",true);
        }
    }
    private void login(){_navigationManager.NavigateTo("/login",false);}

}
<AuthorizeView>
    <Authorized>
        <container class="container-fluid">
            <div class="d-flex">
                @if(Convert.ToBoolean(@context.User.Identity.GetClaimByName(CustomClaimsTypes.Privilege))){
                <a class="mx-2" href="/Mod">
                    Moderation
                </a>}
                <a class="mx-2" href="/User?UserId=@context.User.Identity.GetClaimByName(CustomClaimsTypes.UserId)">
                @context.User.Identity.GetClaimByName(CustomClaimsTypes.Username)
                </a>
                <button type="button" @onclick="Logout" class = "nav-link btn btn-light">Log out</button>
            </div>
        </container>
    </Authorized>
    <NotAuthorized>
        <btn class="btn-light nav-link btn" @onclick="login">Log in</btn>
    </NotAuthorized>
</AuthorizeView>